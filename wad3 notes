FEATURES OF THE GAME:

players role = selcting coordinates to find mines

players objective = 

Each player in turn places a token in one of the locations.

Aim of game: outwit the opponent and identify where as many of the mines are as many of the mines are. 
Only one mine can be placed in a single location.

Game will continue until either all locations have been selected or all the mines have been located. 

The player who lcoates most mines wins.
development:
stage 1 - command line game [using stdin and stdout]

-A start introductory welcome message
-A message identifying who created the game
-A menu which provides the following three options
o Start game >start game from where last game finished
o New game > resets game
o Exit game > quit game
-An appropriate error messages if input invalid
-An appropriate message for example when the player wins or loses
-A finish message

stage 2 - adapting game to sinatra/


Allowances = some building blocks in _gen_ file can be used or added to. New methods can be added also but only within the allocated area.

-------------------------
provide: 

algorithm (plan) = flowchart or structured english

interactive aspects = screen mockups and page flows (of both command line and webgame

Game 
    = 1/2 option for CL or browser version [exit if not 2 or 1]
     = algorithm code must be implemented in game engine   file [_run_...] betwen comments.
     = additional methods or variables can be added to the run file. 

Running the game
command line version - 
displaying menu > start option = game begins from the last state of the game or reset if new. player 1 should be prompted to to choose a location
- this requires storage of inputs

selecting new resets all settings. menu is then redisplayed ready to start new game or exit.
- this requires conditional statement

exit option calls finish method displaying the finish message and exits program.

'enter' key pauses the game

selecting sart option redisplays matrix frame and continues the game from where it was interupted




-----------------------

Outline

end goal >
stage goals >
sub goals>

---------------
structured english:


Operation Statements
– Calculate the total score of this student
– Let this student pass the exam
• Conditional Blocks
IF the total score of this student is greater than 60
THEN
Let this student pass the exam
ELSE
The student fails the exam
END

-------------------------
pseudocode example:

REPEAT
OUTPUT 'What is the best subject you take?'
INPUT user inputs the best subject they take
STORE the user's input in the answer variable
IF answer = 'Computer Science' THEN
OUTPUT 'Of course it is!'
ELSE
OUTPUT 'Try again!'
UNTIL answer = 'Computer Science'

--------------------------
tic-tac-toe example:

Start
- Display Welcome
- Display Key

Determine players // player1 and player2
Determine Who starts //player1
Determine Whose ‘o’ // not relevant for minesweeper


Play game
loop: {iterative and recursive?]

-Display table // matrix empty to begin with then tokens added
-Player 1 turn
-Check Player 1 Winner // inner loop part of itereation process
-Display table
-Player 2 turn
-Check Player 2 Winner

finish

---------------------------
building blocks:

Start
created_by
student_id
setplayer1
setplayer2
getmatrixvalue(cell)
setmatrixvalue(cell)
displaymatrix
checkwinner
finish

----------------------------









